
/**
 * 分割链表
 * @author: lWX1017602
 * @since: 2021/3/1
 */
public class PartitionList {
    /**
     * 给定一个链表和一个特定值 x，对链表进行分隔，使得所有小于 x 的节点都在大于或等于 x 的节点之前。
     * 你应当保留两个分区中每个节点的初始相对位置。
     * 示例:
     * 输入: head = 1->4->3->2->5->2, x = 3
     * 输出: 1->2->2->4->3->5
     */

    /**
     * 1.链表只能从头开始遍历，当值小于target，进行排序，值大于target不动位置
     * 2.应该如何调换位置（需要临时空间进行存储,创建两个新链表存储小于target的值和大于target的值，最后合并）
     * @param node
     * @param target
     * @return
     */
    public ListNode solution(ListNode node ,int target){
        ListNode leftHead = new ListNode();
        ListNode rightHead = new ListNode();
        ListNode rightTempNode = rightHead;
        ListNode leftTempNode = leftHead;
        while (node!=null){
            if (node.val>=target){
                rightHead.next = node;
                rightHead = rightHead.next;
            }else {
                leftHead.next= node;
                leftHead =leftHead.next;
            }
            node= node.next;
        }
        //此处避免环状结构，因为此处修改的都是索引，所以需要将最后一个元素设置为null
        rightHead.next = null;
        leftHead.next = rightTempNode.next;
        return leftTempNode.next;
    }

    public static void main(String[] args) {
        ListNode node = new ListNode(1, new ListNode(4, new ListNode(3, new ListNode(2, new ListNode(5,new ListNode(2,null))))));
        ListNode solution = new PartitionList().solution(node, 3);
        while (solution!=null){
            System.out.println("solution = " + solution.val);
            solution = solution.next;
        }
    }
}
