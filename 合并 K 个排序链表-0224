/**
 * 合并 K 个排序链表
 * @author: lWX1017602
 * @since: 2021/2/24
 */
public class MergeKSortNode {

    /**
     * k个排序链表其实就是2个排序链表的升级版本
     * 我们可以将k个不停二分，直至为两个的合并问题，最后再将其整体合并
     * dp[k]=dp[i]+dp[j](i和j就是k的二分)
     * @param nodes
     * @return
     */
    public static ListNode mergeKListNode(ListNode[] nodes){
        if (nodes.length == 0){
            return new ListNode();
        }
        if (nodes.length == 1){
            return nodes[0];
        }
        if (nodes.length == 2){
            return mergeTwoNode(nodes[0],nodes[1]);
        }
        int mid =nodes.length/2;
        ListNode[] leftList = new ListNode[mid];
        for (int i = 0; i < leftList.length; i++) {
            leftList[i]=nodes[i];
        }

        ListNode[] rightList = new ListNode[nodes.length-mid];
        for (int j = 0,i=mid; i < nodes.length; j++,i++) {
            rightList[j] = nodes[i];
        }

        return mergeTwoNode(mergeKListNode(leftList),mergeKListNode(rightList));
    }

    private static ListNode mergeTwoNode(ListNode n1, ListNode n2) {
        if (n1==null)return n2;
        if (n2==null)return n1;
        ListNode head =null;
        if (n1.value<n2.value){
            head=n1;
            head.next = mergeTwoNode(n1.next,n2);
        }else{
            head=n2;
            head.next = mergeTwoNode(n1,n2.next);
        }
        return head;
    }

    static class ListNode{
        private int value;
        private ListNode next;

        public ListNode() {
        }

        public ListNode(int value, ListNode next) {
            this.value = value;
            this.next = next;
        }

        public int getValue() {
            return value;
        }

        public void setValue(int value) {
            this.value = value;
        }

        public ListNode getNext() {
            return next;
        }

        public void setNext(ListNode next) {
            this.next = next;
        }
    }

    public static void main(String[] args) {
        ListNode node1 = new ListNode(1, new ListNode(2, new ListNode(3, new ListNode(4, new ListNode(5,null)))));
        ListNode node2 = new ListNode(1, new ListNode(1, new ListNode(3, new ListNode(4, new ListNode(5,null)))));
        ListNode node3 = new ListNode(1, new ListNode(2, new ListNode(3,null)));
        ListNode[] nodes =new ListNode[]{node1,node2,node3};
        ListNode listNode = mergeKListNode(nodes);
        while (listNode!=null){
            System.out.println("listNode = " + listNode.value);
            listNode = listNode.next;
        }

    }
}
