/**
 * 合并两个有序链表
 * @author: lWX1017602
 * @since: 2021/2/23
 */
public class MergeTwoSortNode {
    /**
     * 输入：1->2->4, 1->3->4
     * 输出：1->1->2->3->4->4
     */

    static class Node{
        private int value;
        private Node next;

        public Node() {
        }

        public Node(int value, Node next) {
            this.value = value;
            this.next = next;
        }

        public int getValue() {
            return value;
        }

        public void setValue(int value) {
            this.value = value;
        }

        public Node getNext() {
            return next;
        }

        public void setNext(Node next) {
            this.next = next;
        }


    }

    /**
     * 由题意可知两个链表已是有序
     * 1.同时遍历两个数组，比较大小，将小的结点接在新的链表上
     * @param n1
     * @param n2
     * @return
     */
    public static Node mergeSolution(Node n1,Node n2){
        if (n1==null){
            return n2;
        }
        if (n2==null){
            return n1;
        }
        Node tempNode = new Node();
        Node headNode =tempNode;
        while (n1!=null && n2!=null){
            if (n1.value<n2.value){
                tempNode.setNext(new Node(n1.value,null));
                tempNode=tempNode.next;
                n1=n1.next;
            }else {
                tempNode.setNext(new Node(n2.value,null));
                tempNode=tempNode.next;
                n2=n2.next;
            }
        }
        if (n1==null){
            while (n2!=null){
                tempNode.setNext(n2);
                tempNode=tempNode.next;
                n2=n2.next;
            }
        }else if (n2==null){
            while (n1!=null){
                tempNode.setNext(n1);
                tempNode=tempNode.next;
                n1=n1.next;
            }
        }
        return headNode.next;
    }

    public static void main(String[] args) {
        Node node1 = new Node(1, new Node(2, new Node(3, new Node(4, new Node(5,null)))));
        Node node2 = new Node(1, new Node(2, new Node(3, new Node(4, new Node(5,null)))));
        Node node = mergeSolution(node1, node2);
        while (node!=null){
            System.out.println("node.value = " + node.value);
            node=node.next;
        }
    }
}
