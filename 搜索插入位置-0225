/**
 * 搜索插入位置
 *
 * @author: lWX1017602
 * @since: 2021/2/25
 */
public class SearchInPosition {
    /**
     * 给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。 你可以假设数组中无重复元素。
     * 示例 1:
     * 输入: [1,3,5,6], 5
     * 输出: 2
     */

    /**
     * 1.直接去找，找到返回索引，新增临时空间存储标记（看标记处是否大于target值）
     *
     * @param ints
     * @param target
     * @return
     */
    public static int solution(int[] ints, int target) {
        int temp = 0;
        while (temp < ints.length && ints[temp] <= target) {
            if (ints[temp] == target) {
                return temp;
            }
            temp++;
        }
        return temp;
    }

    /**
     * 排序数组，对目标值进行相关操作，立马就想到二分法
     *
     * @param nums
     * @param target
     * @return
     */
    public static int solution2(int[] nums, int target) {
        int min = 0;
        int max = nums.length - 1;
        if (target > nums[max]) {
            return max + 1;
        }
        int mid = (min + max) / 2;
        while (min < max) {
            if (nums[mid] < target) {
                min = mid + 1;
            } else {
                max = mid;
            }
            mid = (min + max) / 2;
        }
        return min;
    }

    public static void main(String[] args) {
        int[] ints = new int[] {1, 3, 5, 6};
        int i = solution2(ints, 8);
        System.out.println("i = " + i);
    }
}
