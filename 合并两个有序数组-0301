/**
 * 合并两个有序数组
 * @author: lWX1017602
 * @since: 2021/3/1
 */
public class MergeTwoSortArr {

    /**
     * 给你两个有序整数数组 nums1 和 nums2，请你将 nums2 合并到 nums1 中*，*使 nums1 成为一个有序数组。
     * 说明:
     * 初始化 nums1 和 nums2 的元素数量分别为 m 和 n 。
     * 你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。
     * 示例:
     * 输入:
     * nums1 = [1,2,3,0,0,0], m = 3
     * nums2 = [2,5,6],       n = 3
     * 输出: [1,2,2,3,5,6]
     */

    /**
     * 1.当nums2中小于nums1时，nums1的对应位置的元素全都往后移动一位
     * 2.优解：是从小的开始比较排序，还是从大的开始排序会好些
     *      -- 从小的开始比较，需要将大的都往后面移动一位
     *      -- 从大的开始比较，因为后面的位置是空的，直接赋值就好了，不需要额外的移动
     *  何时结束：
     *          1.当nums1中存在元素比nums2中小的时候，n会到0
     *          2.与1相反时，m会先到0，这个时候继续操作nums2的元素给nums1就行了，此时原先nums1中的数据已经排序ok了
     *
     * @param nums2
     * @return
     */
    public int[] solution(int[]nums1,int[]nums2,int m,int n){
        int len = m+n;
        while (n > 0 && m > 0){
           nums1[--len] = nums1[m-1] >= nums2[n-1] ? nums1[--m] : nums2[--n];
        }
        while (n>0){
            nums1[n-1] = nums2[n-1];
            n--;
        }
        return nums1;
    }

    public static void main(String[] args) {
        int[] arr1 = {5, 7, 8, 0, 0, 0};
        int[] arr2 = {2,5,6};

        int[] solution = new MergeTwoSortArr().solution(arr1, arr2, 3, 3);
        for (int i = 0; i < 6; i++) {
            System.out.println("i = " + arr1[i]);
        }
    }
}
