/**
 * K 个一组翻转链表
 * @author: lWX1017602
 * @since: 2021/2/24
 */
public class ReverseNodesInKGoup {
    /**
     * 给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。
     * k 是一个正整数，它的值小于或等于链表的长度。
     * 如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。
     *
     * 示例:
     * 给你这个链表：1->2->3->4->5
     * 当 k = 2 时，应当返回: 2->1->4->3->5
     * 当 k = 3 时，应当返回: 3->2->1->4->5
     *
     * 说明:
     * 你的算法只能使用常数的额外空间。
     * 你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。
     */

    /**
     * 此题与合并k个有序链表（转换为两个链表求和）类似，不同的是此处需要我们反转链表
     * 1.是否可以通过栈实现
     * @param node
     * @param k
     * @return
     */
    public ListNode reverseKGroup (ListNode node, int k){
        if (node == null){
            return null;
        }
        ListNode start = node;
        ListNode end = node;
        for (int i = 0; i < k; i++) {
            if (end == null ){
                return node;
            }
            end=end.next;
        }
        // 获取到反转的链表
        ListNode reverNode = reverNode(start,end);
        start.next = reverseKGroup(end,k);
        return reverNode;
    }

    /**
     * 反转区间【start，end)的链表
     *
     * 算法学习：1->2—>3    k=2; 1->null  2 2->1->null   3 3->2->1->null
     * 所以每次 拿到节点先让它处于无next状态，然后让当前无状态节点指向之前的累计节点
     * @param start
     * @param end
     * @return
     */
    private ListNode reverNode(ListNode start, ListNode end) {
        ListNode pre = null,
        cur = start,
        nxt =start;
        while (cur!=end){
            nxt=cur.next;
            // 逐个节点反转
            cur.next = pre;
            // 更新指针位置
            pre =cur;
            cur=nxt;
        }
        return pre;
    }

    public static void main(String[] args) {
        ListNode listNode = new ReverseNodesInKGoup().reverseKGroup(
                new ListNode(1, new ListNode(2, new ListNode(3, null))), 2);
        while (listNode!=null){
            System.out.println("listNode.val = " + listNode.val);
            listNode=listNode.next;
        }
    }
}
