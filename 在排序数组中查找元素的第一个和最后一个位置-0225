/**
 * 在排序数组中查找元素的第一个和最后一个位置
 *
 * @author: lWX1017602
 * @since: 2021/2/25
 */
public class FindFirLastNumInArr {

    /**
     * 给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。
     * 你的算法时间复杂度必须是 O(log n) 级别。
     * 如果数组中不存在目标值，返回 [-1, -1]。
     * 示例:
     * 输入: nums = [5,7,7,8,8,10], target = 8
     * 输出: [3,4]
     */

    /**
     * 条件：升序排列整数数组
     * 1.首先需要遍历到target,无，返回【-1，-1】，有，继续遍历到不是该元素，返回结果
     * 2.第一种其实就是暴力法，并无法缩减时间，因为是排序的，所以可以通过二分法找到target，然后两个指针分为向两侧移动看值是否一致，不一致的停下
     *
     * @param arr
     * @return
     */
    public static int[] solution(int[] arr, int target) {
        int start = 0;
        int end = 0;
        while (end < arr.length && arr[end] <= target) {
            if (arr[end] < target) {
            } else if (arr[end] == target) {
                start++;
            }
            end++;
        }
        if (start < 1) {
            return new int[] {-1, -1};
        }
        return new int[] {end - start, end - 1};
    }

    public static int[] solution2(int[] arr, int target) {
        int min = 0;
        int max = arr.length - 1;
        int mid = (min + max) / 2;

        while (min < max && arr[mid] != target) {
            if (arr[mid] > target) {
                max = mid;
            } else {
                min = mid+1;
            }
            mid = (max + min) / 2;
        }
        if (min > max) {
            return new int[] {-1, -1};
        }

        int left = mid, right = mid;
        while (left>=0&&arr[left] == arr[mid]) {
            left--;
        }
        while (right<arr.length&&arr[right] == arr[mid]) {
            right++;
        }
        return new int[] {++left, --right};
    }

    public static void main(String[] args) {
        int[] solution = solution2(new int[] {5, 7, 7, 8, 8, 10}, 7);
        for (int i = 0; i < solution.length; i++) {
            System.out.println("solution = " + solution[i]);
        }
    }

}
