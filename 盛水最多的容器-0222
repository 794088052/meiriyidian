/**
 * 盛水最多的容器
 *
 * 给你n个非负整数a1，a2，...，an，每个数代表坐标中的一个点(i,ai)。在坐标内画n条垂直线，
 * 垂直线i的两个端点分别为(i,ai)和(i,0)。找出其中的两条线，使得它们与x轴共同构成的容器可以容纳最多的水。
 * 说明：你不能倾斜容器，且n的值至少为2。
 * 示例：
 * 输入：[1,8,6,2,5,4,8,3,7]
 * 输出：49
 *
 * @author: lWX1017602
 * @since: 2021/2/22
 */
public class MaxArea {

    /**
     * 主要求短边和索引间距的最大乘积
     * 1.暴力法，双层for循环读取数据，进行计算，得出最大值
     * 2.双指针，如何移动指针，指针是从两端往中间聚合的，所以索引间距是减少的，那就需要移动较小值的指针
     *
     * @param arr
     * @return
     */
    public static int maxAreaSize(int [] arr){
        int left = 0;
        int right = arr.length-1;
        int maxArea =0;
        while (left!=right){
            if (arr[left] < arr[right]){
                maxArea = Math.max(arr[left]*(right-left),maxArea);
                left++;
            }else {
                maxArea = Math.max(arr[right]*(right-left),maxArea);
                right--;
            }
        }
        return maxArea;
    }

    public static void main(String[] args) {
        int[] ints = {1, 8, 6, 2, 5, 4, 8, 3, 7};
        int maxArea = maxAreaSize(ints);
        System.out.println("maxArea = " + maxArea);
    }
}
