/**
 * 柱状图中的最大矩形
 * @author: lWX1017602
 * @since: 2021/3/1
 */
public class LargestRectangle {

    /**
     * 给定 n 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。
     * 求在该柱状图中，能够勾勒出来的矩形的最大面积。
     */

    /**
     * 面积=高度*长度（元素值*索引间距）
     * 分治算法：
     * 通过观察，可以发现，最大面积矩形存在于以下几种情况：
     * 确定了最矮柱子以后，矩形的宽尽可能往两边延伸。
     * 在最矮柱子左边的最大面积矩形（子问题）。
     * 在最矮柱子右边的最大面积矩形（子问题）。
     * @param heights
     * @return
     */
    public int solution(int[]heights){
        return calculateArea(heights, 0, heights.length - 1);
    }

    private int calculateArea(int[] heights, int start, int end) {
        if (start>end){
            return 0;
        }
        int minIndex = start;

        // 此处遍历找出最小的元素的索引值（是否可以优化）
        for (int i = start; i <=end; i++) {
            if (heights[minIndex]>heights[i]){
                minIndex=i;
            }
        }

        return Math.max(heights[minIndex]*(end-start+1),Math.max(calculateArea(heights,start,minIndex-1),calculateArea(heights,minIndex+1,end)));
    }

    public static void main(String[] args) {
        int solution = new LargestRectangle().solution(new int[] {2, 1, 5, 6, 2, 3});
        System.out.println("solution = " + solution);
    }
}
